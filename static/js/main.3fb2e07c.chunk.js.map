{"version":3,"sources":["media/audio/finish-sound.mp3","components/timer.js","components/timer-display.js","components/box-result.js","components/start-input-form.js","components/countdown.js","index.js"],"names":["module","exports","Timer","clearALL","init","clearTimeout","clockTimer","setState","hours","minutes","seconds","msSeconds","play","findTIME","state","startDate","Date","startTime","clearFields","this","t","getTime","ms","Math","floor","s","m","h","setTimeout","className","id","onClick","size","type","React","Component","TimerDisplay","props","BoxResult","persent","width","format","percent","isInValid","valid","touched","showldValidate","StartInputForm","handleSubmitForm","e","preventDefault","formControl","setInput","Object","keys","map","controlName","index","control","htmlFor","random","inputClass","validation","labelClass","key","label","min","max","onChange","value","onChangeText","disabled","prefix","style","color","required","target","errorMessage","onChangeSlider","slider","step","isStartValid","reset","visible","checkVisible","onSubmit","checked","renderInputs","renderSlider","htmlType","Countdown","time","returnFormattedToSeconds","second","newTimerData","timerData","totalTime","validateControl","forEach","name","timerId","maxMin","minMinuts","number","firstWord","maxSecond","minSeconds","round","isValid","trim","Audio","finishedSound","App","TabPane","Tabs","defaultActiveKey","tab","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fb2e07c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/finish-sound.ff93cfed.mp3\";","import React from 'react';\r\nimport {\r\n  Button\r\n} from 'antd';\r\n\r\n\r\nexport default class Timer extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      msSeconds: 0,\r\n      play: 'Старт',\r\n    };\r\n    this.clockTimer = null;\r\n    this.init = 0;\r\n    this.startDate = null;\r\n  }\r\n\r\n  clearFields() {\r\n    this.setState({\r\n      play: 'Старт',\r\n    });\r\n    clearTimeout(this.clockTimer);\r\n  }\r\n\r\n  clearALL = () => {\r\n    this.init = 0;\r\n    clearTimeout(this.clockTimer);\r\n    this.setState({\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      msSeconds: 0,\r\n      play: 'Старт',\r\n    })\r\n  }\r\n\r\n  startTime(startDate) {\r\n    const thisDate = new Date();\r\n    let t = thisDate.getTime() - startDate.getTime();\r\n    let ms = t % 1000;\r\n    t -= ms;\r\n    ms = Math.floor(ms / 10);\r\n    t = Math.floor(t / 1000);\r\n    let s = t % 60;\r\n    t -= s;\r\n    t = Math.floor(t / 60);\r\n    let m = t % 60;\r\n    t -= m;\r\n    t = Math.floor(t / 60);\r\n    let h = t % 60;\r\n    if (this.init === 1) {\r\n      this.setState({\r\n        hours: h,\r\n        minutes: m,\r\n        seconds: s,\r\n        msSeconds: ms,\r\n      });\r\n    }\r\n    this.clockTimer = setTimeout(() => this.startTime(startDate), 10);\r\n  }\r\n\r\n  findTIME = () => {\r\n    if (this.state.play === \"Старт\" && this.init === 0) {\r\n      this.startDate = new Date();\r\n      this.startTime(this.startDate);\r\n      this.setState({\r\n        play: 'Пауза',\r\n      });\r\n      this.init = 1;\r\n    } else if (this.state.play === \"Старт\" && this.init === 1) {\r\n      this.startTime(this.startDate);\r\n      this.setState({\r\n        play: 'Пауза',\r\n      });\r\n    } else {\r\n      this.clearFields();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n      msSeconds,\r\n      play\r\n    } = this.state;\r\n\r\n    hours = (hours < 10) ? '0' + hours : hours;\r\n    minutes = (minutes < 10) ? '0' + minutes : minutes;\r\n    seconds = (seconds < 10) ? '0' + seconds : seconds;\r\n    msSeconds = (msSeconds < 10) ? '0' + msSeconds : msSeconds;\r\n\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <div id=\"countdown\" className=\"countdown\">\r\n            <div className=\"countdown-number\">\r\n              <span className=\"hours countdown-time\">{hours}</span>\r\n              <span className=\"countdown-text\">Часы</span>\r\n            </div>\r\n            <div className=\"countdown-number\">\r\n              <span className=\"minutes countdown-time\">{minutes}</span>\r\n              <span className=\"countdown-text\">Минуты</span>\r\n            </div>\r\n            <div className=\"countdown-number\">\r\n              <span className=\"seconds countdown-time\">{seconds}</span>\r\n              <span className=\"countdown-text\">Секунды</span>\r\n            </div>\r\n            <div className=\"countdown-number\">\r\n              <span className=\"msseconds countdown-time\">{msSeconds}</span>\r\n              <span className=\"countdown-text\">Милисекунды</span>\r\n            </div>\r\n        </div>\r\n        <div className=\"btn-block\">\r\n            <Button onClick={this.findTIME}\r\n                    className=\"btn-clock\"\r\n                    size=\"large\"\r\n                    type=\"primary\">\r\n                {play}\r\n            </Button>\r\n            <Button onClick={this.clearALL}\r\n                    className=\"btn-clock\"\r\n                    size=\"large\"\r\n                    type=\"danger\">\r\n              Сбросить\r\n            </Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class TimerDisplay extends React.Component {\r\n\r\n    render() {\r\n      const { minutes, seconds} = this.props;\r\n      return (\r\n              <div id=\"countdown\" className=\"countdown\">\r\n                  <div className=\"countdown-number\">\r\n                     <span className=\"minutes countdown-time\">{`${minutes < 10 ? '0' + minutes : minutes}`}</span>\r\n                  </div>\r\n                  <div className=\"countdown-number\">\r\n                     <span className=\"seconsd countdown-time\">{`${seconds < 10 ? '0' + seconds : seconds}`}</span>\r\n                  </div>\r\n              </div>\r\n      )\r\n    }\r\n\r\n}\r\n\r\nTimerDisplay.propTypes = {\r\n  seconds: PropTypes.number,\r\n  minutes: PropTypes.number,\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport TimerDisplay from './timer-display';\r\nimport { Progress } from 'antd';\r\n\r\n\r\nexport default class BoxResult extends React.Component {\r\n  render() {\r\n    const { minutes, seconds, persent } = this.props;\r\n    return (\r\n      <div className=\"result-box\"> \r\n            <div className=\"result-box__progress\">\r\n            <Progress \r\n                type=\"circle\" \r\n                width={210}\r\n                format={() => {\r\n                    return (\r\n                      <TimerDisplay \r\n                        seconds={seconds}\r\n                        minutes={minutes}/>\r\n                    )\r\n                  }}\r\n                  percent={persent} />\r\n            </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nBoxResult.propTypes = {\r\n  minutes: PropTypes.number,\r\n  seconds: PropTypes.number,\r\n  percent: PropTypes.number,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {  Icon, Input, Button, Slider, Checkbox } from 'antd';\r\n\r\n\r\nconst isInValid = (valid, touched, showldValidate) => {\r\n     if( (valid === false) && showldValidate && touched) {\r\n       return true;\r\n     } else {\r\n       return false;\r\n     }\r\n}\r\nexport default class StartInputForm extends React.Component {\r\n\r\n  renderInputs(formControl,  setInput) {\r\n      return Object.keys(formControl).map((controlName, index) => {\r\n            const control = formControl[controlName];\r\n            const htmlFor = `${control.type}-${Math.random()}`;\r\n            const inputClass = isInValid(control.valid, control.touched, !!control.validation) ? 'input invalid-input' : 'input';\r\n            const labelClass = isInValid(control.valid, control.touched, !!control.validation) ? 'label invalid-label' : 'label';\r\n            return (\r\n              <div key={controlName + index} className=\"input-box\">\r\n                <label className={labelClass} htmlFor={htmlFor}>{control.label}</label>\r\n                <Slider\r\n                  id={htmlFor}\r\n                  min={control.min}\r\n                  max={control.max}\r\n                  onChange={(value) => this.props.onChangeText(value, controlName, 'slider')}\r\n                  disabled={setInput}\r\n                  value={control.value === '' ? 0 : +control.value}/>\r\n                <Input\r\n                  min={control.min}\r\n                  max={control.max}\r\n                  className={inputClass}\r\n                  id={htmlFor}\r\n                  prefix={<Icon type=\"arrow-right\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  type={control.type || 'text'}\r\n                  disabled={setInput}\r\n                  required={control.validation.required}\r\n                  value={control.value}\r\n                  onChange={(e) => this.props.onChangeText(e.target.value, controlName)}/>\r\n\r\n                  {isInValid(control.valid, control.touched, !!control.validation)\r\n                     ? <span className=\"error-message\">{control.errorMessage || 'Введите корректное значение'}</span>\r\n                     : null\r\n                  }\r\n              </div>\r\n            );\r\n      });\r\n  }\r\n  \r\n renderSlider() {\r\n    const { onChangeSlider, slider, setInput } = this.props;\r\n    return (\r\n      <div className=\"form-control__slider-block\">\r\n        <p className=\"form-control__slider-text\">Секунды:</p>\r\n        <Slider\r\n          disabled={setInput}\r\n          min={0}\r\n          max={3600}\r\n          onChange={(value) => onChangeSlider(value)}\r\n          value={slider.value}\r\n          step={15} />\r\n       </div>\r\n    )\r\n\r\n }\r\n\r\n  handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n     const { isStartValid, findTIME, play, reset, formControl, setInput, visible,  checkVisible } = this.props;\r\n     return (\r\n        <form className=\"form-control\" onSubmit={this.handleSubmitForm}>\r\n            <div className=\"form-control__checked-block\">\r\n              <label className=\"form-control__check-text\" htmlFor=\"checkText\">\r\n                Задать время через текстовые поля:\r\n                <Checkbox  \r\n                    checked={visible}\r\n                    className=\"form-control__check-input\"\r\n                    id=\"checkText\"\r\n                    onChange={() => checkVisible()}/>\r\n              </label>\r\n            </div>\r\n             {visible\r\n              ? <div className=\"form-control__inputs-block\">\r\n                  {this.renderInputs(formControl, setInput )}\r\n                 </div>\r\n              : this.renderSlider()\r\n              }\r\n            <div className=\"form-control__buttons-block\">\r\n              <Button  onClick={() => findTIME()} \r\n                       disabled={!isStartValid}\r\n                       className=\"control-btn\" \r\n                       size=\"large\"\r\n                       type=\"primary\" \r\n                       htmlType=\"submit\" >\r\n                 {play}\r\n              </Button>\r\n              <Button onClick={() => reset()}   \r\n                      className=\"control-btn\" \r\n                      size=\"large\" \r\n                      type=\"danger\" \r\n                      htmlType=\"submit\" >\r\n                Сбросить\r\n              </Button>\r\n            </div>\r\n        </form>\r\n     )\r\n  }\r\n\r\n}\r\n\r\nStartInputForm.propTypes = {\r\n  formControl: PropTypes.object,\r\n  findTIME: PropTypes.func,\r\n  play: PropTypes.string,\r\n  reset: PropTypes.func,\r\n  setInput: PropTypes.bool,\r\n  visible: PropTypes.bool,\r\n  checkVisible: PropTypes.func,\r\n  isStartValid: PropTypes.bool,\r\n  onChangeSlider: PropTypes.func,\r\n  slider: PropTypes.object,\r\n}","import React from 'react';\r\nimport BoxResult from './box-result';\r\nimport StartInputForm from './start-input-form';\r\nimport finishedSound from '../media/audio/finish-sound.mp3';\r\n\r\nexport default class Countdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      setInput: false,\r\n      isStartValid: true,\r\n      visible: true,\r\n      formControl: {\r\n        min: {\r\n          value: 0,\r\n          type:'number',\r\n          label: 'Минуты:',\r\n          errorMessage: 'Введите корректное время в минутах',\r\n          valid: true,\r\n          min: 0,\r\n          max: 720,\r\n          touched: false,\r\n          validation: {\r\n            required: true,\r\n            maxMin: 720,\r\n            minMinuts: '0',\r\n            number: true,\r\n            firstWord: true,\r\n          },\r\n        }, \r\n        seconds: {\r\n          value: 0,\r\n          type:'number',\r\n          label: 'Cекунды:',\r\n          errorMessage: 'Введите корректное время в секундах',\r\n          valid: true,\r\n          min: 0,\r\n          max: 59,\r\n          touched: false,\r\n          validation: {\r\n            required: true,\r\n            maxSecond: 59,\r\n            minSeconds: '0',\r\n            number: true,\r\n            firstWord: true,\r\n          },\r\n        },\r\n      },\r\n      slider: {\r\n        value: 0,\r\n      },\r\n      timerData: {\r\n          minutes:0,\r\n          seconds: 0,\r\n          play: 'Старт',\r\n          init: 0,\r\n          timerId: null,\r\n          persent: 0,\r\n          step: 0,\r\n          totalTime: 0,\r\n      },\r\n    };\r\n  }\r\n \r\n  returnFormattedToSeconds(time){\r\n    let minutes = Math.floor(time / 60),\r\n        seconds = Math.round(time - minutes * 60);\r\n\r\n    return {\r\n      minutes,\r\n      seconds\r\n    }\r\n}\r\n\r\n  validateControl(value, validation, slider) {\r\n      if(!validation || value === '0' || slider) {\r\n        return true;\r\n      }\r\n       \r\n      let isValid = true;\r\n\r\n      if(validation.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n      }\r\n   \r\n\r\n      if(validation.minMinuts) {\r\n        isValid = value >= validation.minMinuts && isValid; \r\n      }\r\n\r\n      if(validation.maxMin) {\r\n        isValid = value <= validation.maxMin && isValid;\r\n      }\r\n\r\n     if(validation.minSeconds) {\r\n       isValid = value >= validation.minSeconds && isValid;\r\n     }\r\n\r\n      if(validation.maxSecond) {\r\n        isValid = value <= validation.maxSecond && isValid;\r\n      }\r\n\r\n      return isValid;\r\n  }\r\n\r\n  onChangeSlider = (value) => {\r\n      const time = this.returnFormattedToSeconds(value);\r\n      let second = time.seconds;\r\n      let minutes = time.minutes;\r\n      let newTimerData = { ...this.state.timerData };\r\n      newTimerData.seconds = second;\r\n      newTimerData.minutes = minutes;\r\n      newTimerData.step = (100 / (minutes * 60 + second));\r\n      newTimerData.totalTime = time.minutes * 60 + time.seconds;\r\n      newTimerData.persent = 0;\r\n\r\n      this.setState(({ slider, timerData }) => {\r\n        return {\r\n            slider: {\r\n              value: value,\r\n            },\r\n            timerData: newTimerData\r\n        }\r\n      })\r\n   \r\n  }\r\n\r\n  checkVisible = () => {\r\n       this.setState(({ visible, formControl, timerData, slider }) => {\r\n            return {\r\n              visible: !visible,\r\n            }\r\n       })\r\n  }\r\n\r\n\r\n  onChangeText = (value, controlName = null, slider = null) => {\r\n    if(controlName) {\r\n      const formControl = { ...this.state.formControl };\r\n      const control = { ...formControl[controlName] };\r\n      const timerData = { ...this.state.timerData };\r\n      \r\n      control.value = value;\r\n      control.touched =   value > 0 || value === '' || value < 0;\r\n      control.valid = this.validateControl(control.value, control.validation, slider);\r\n      formControl[controlName] = control;\r\n\r\n      let isStartValid = true;\r\n\r\n      Object.keys(formControl).forEach((name) => {\r\n        isStartValid = formControl[name].valid && isStartValid;\r\n      })\r\n    \r\n      if(controlName === 'min' && control.valid) {\r\n          timerData.minutes = +control.value;\r\n      }\r\n\r\n      if(controlName === 'seconds' && control.valid) {\r\n        timerData.seconds = +control.value;\r\n      }\r\n\r\n      timerData.step =  (100 / (timerData.minutes * 60 + timerData.seconds));\r\n      timerData.totalTime = timerData.minutes * 60 + timerData.seconds;\r\n      timerData.persent = 0;\r\n\r\n      this.setState({\r\n        formControl,\r\n        isStartValid,\r\n        timerData,\r\n      })\r\n    }\r\n  }\r\n\r\n  clearALL = () => {\r\n    clearTimeout(this.state.timerData.timerId);\r\n      this.setState(({ formControl, timerData }) => {\r\n        formControl.min.value = 0;\r\n        formControl.min.valid = true;\r\n        formControl.min.touched = false;\r\n        formControl.seconds.value = 0;\r\n        formControl.seconds.valid = true;\r\n        formControl.seconds.touched = false;\r\n        const isStartValid = true;\r\n        const newTimerData = {\r\n          minutes:0,\r\n          seconds: 0,\r\n          play: 'Старт',\r\n          init: 0,\r\n          step: 0,\r\n          timerId: null,\r\n          totalTime: 0,\r\n        };\r\n        return {\r\n            setInput:false,\r\n            isStartValid,\r\n            timerData: newTimerData,\r\n            formControl,\r\n        }\r\n      })\r\n  }\r\n  \r\n  clearFields() {\r\n     clearTimeout(this.state.timerData.timerId);\r\n     this.setState(({ timerData }) => {\r\n       timerData.play = 'Старт';\r\n       return {\r\n          timerData,\r\n       }\r\n     })\r\n  }\r\n\r\n  startTime() {\r\n       let { totalTime, step } = this.state.timerData;\r\n       const time = this.returnFormattedToSeconds(totalTime);\r\n       const timerData = { ...this.state.timerData };\r\n\r\n       const  timerId = setTimeout(() => this.startTime(), 1000);\r\n\r\n       timerData.totalTime = totalTime - 1;\r\n       timerData.seconds = time.seconds;\r\n       timerData.minutes= time.minutes;\r\n       timerData.persent = timerData.persent + step;\r\n       timerData.timerId = timerId;\r\n\r\n       this.setState({\r\n         timerData\r\n       });\r\n\r\n       if(totalTime === 0) {\r\n        const finishedAudio = new Audio(finishedSound);\r\n        finishedAudio.play();\r\n        this.clearALL();\r\n        this.setState(({timerData}) => {\r\n          timerData.persent = 100;\r\n          return {\r\n            timerData\r\n          }\r\n        });\r\n      }\r\n  }\r\n\r\n  findTIME = () => {\r\n      if(this.state.timerData.play === 'Старт' && this.state.timerData.init === 0 && \r\n         (this.state.timerData.minutes > 0 || this.state.timerData.seconds > 0)) {\r\n         this.startTime();\r\n         this.setState(({ formControl, timerData, slider }) => {\r\n          const newTimerData = { ...timerData };\r\n          newTimerData.init = 1;\r\n          newTimerData.play = 'Пауза';\r\n          newTimerData.persent = 0;\r\n          formControl.min.value = 0;\r\n          formControl.seconds.value = 0;\r\n          slider.value = 0;\r\n          return {\r\n            setInput: true,\r\n            formControl,\r\n            timerData: newTimerData,\r\n            slider\r\n          }\r\n        })\r\n      } else if(this.state.timerData.play === 'Старт' && this.state.timerData.init === 1) {\r\n        this.startTime();\r\n        this.setState(({ timerData }) => {\r\n          timerData.play = 'Пауза';\r\n          return {\r\n            timerData,\r\n          }\r\n        })\r\n      } else {\r\n        this.clearFields();\r\n      }       \r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"wrapper-timer\">\r\n      <BoxResult minutes={this.state.timerData.minutes}\r\n                 seconds={this.state.timerData.seconds}\r\n                 persent={Math.round(this.state.timerData.persent)}\r\n                />\r\n      <StartInputForm \r\n        onChangeText={this.onChangeText}\r\n        onChangeSlider={this.onChangeSlider}\r\n        checkVisible={this.checkVisible}\r\n        visible={this.state.visible}\r\n        slider={this.state.slider}\r\n        formControl={this.state.formControl}\r\n        findTIME={this.findTIME}\r\n        play={this.state.timerData.play}\r\n        isStartValid={this.state.isStartValid}\r\n        reset={this.clearALL}\r\n        setInput={this.state.setInput}/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Tabs, Icon } from 'antd';\r\nimport Timer from './components/timer';\r\nimport Countdown from './components/countdown';\r\nimport 'antd/dist/antd.css';\r\nimport './style/style.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const { TabPane } = Tabs;\r\n     return (\r\n         <div className=\"tab-container\">\r\n            <Tabs defaultActiveKey=\"2\">\r\n              <TabPane\r\n                  tab={\r\n                    <span>\r\n                    <Icon type=\"clock-circle\" />\r\n                      Секундомер\r\n                    </span>\r\n                  }\r\n                   key=\"1\">\r\n                 <Timer />\r\n              </TabPane>\r\n              <TabPane\r\n                  tab={\r\n                    <span>\r\n                      <Icon type=\"history\" />\r\n                      Таймер обратного отсчета\r\n                    </span>\r\n                  }\r\n                  key=\"2\">\r\n                  <Countdown />\r\n              </TabPane>\r\n          </Tabs>\r\n         </div>\r\n     );\r\n    \r\n}\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}